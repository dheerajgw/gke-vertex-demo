name: CD

on:
  workflow_run:
    workflows: ["CI (main-only, self-heal)"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Authenticate to GCP
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}
          export_default_credentials: true

      # Configure Docker to push to Artifact Registry
      - name: Configure Docker auth
        run: gcloud auth configure-docker ${{ secrets.AR_REGION }}-docker.pkg.dev --quiet

      # Build & push container
      - name: Build & Push Image
        run: |
          IMAGE="${{ secrets.AR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}"
          docker build -t $IMAGE:${{ github.sha }} ./app
          docker push $IMAGE:${{ github.sha }}
          echo "IMAGE_URI=$IMAGE:${{ github.sha }}" >> $GITHUB_ENV

      # Install GKE kubectl auth plugin
      - name: Install GKE auth plugin
        run: |
          set -euo pipefail
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
          sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
          if [ ! -f /usr/share/keyrings/cloud.google.gpg ]; then
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
            sudo apt-get update
          fi
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      # Connect to cluster
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --region ${{ secrets.GCP_LOCATION }} \
            --project ${{ secrets.GCP_PROJECT }}

      # Deploy to GKE
      - name: Deploy manifests
        run: |
          sed "s|PROJECT_ID|${{ secrets.GCP_PROJECT }}|g; s|IMAGE_URI|$IMAGE_URI|g" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/fancy-app --timeout=90s

