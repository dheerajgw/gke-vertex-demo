name: CD

on:
  # CD runs after CI completes successfully
  workflow_run:
    workflows: ["CI (main-only, self-heal)"]  # <-- MUST match your CI workflow name exactly
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REPO_NAME: node-app-repo
      IMAGE_NAME: fancy-app
      AR_REGION: ${{ secrets.AR_REGION }}   # optional; we fallback to us-central1 in bash

    steps:
      - uses: actions/checkout@v4

      # Authenticate to GCP with your service account JSON stored in secret GCP_SA_KEY
      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      # Install the GKE kubectl auth plugin (Ubuntu 24.04-safe keyring flow)
      - name: Install GKE auth plugin
        run: |
          set -euo pipefail
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg \
            | sudo gpg --dearmor -o /etc/apt/keyrings/google-cloud-archive-keyring.gpg
          sudo chmod 0644 /etc/apt/keyrings/google-cloud-archive-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/google-cloud-archive-keyring.gpg] https://packages.cloud.google.com/apt cloud-sdk main" \
            | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      # Configure Docker for all registries (simpler than per-region)
      - name: Configure Docker auth
        run: gcloud auth configure-docker --quiet

      # Diagnostics (helpful if pushes fail)
      - name: gcloud auth context (diagnostics)
        run: |
          gcloud auth list
          gcloud config list

      - name: Print SA email from credentials
        run: |
          python - <<'PY'
          import os, json, glob
          path = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS') or (glob.glob('**/*.json', recursive=True)[:1][0])
          with open(path) as f:
              data = json.load(f)
          print("CREDENTIAL FILE:", path)
          print("SERVICE ACCOUNT:", data.get("client_email"))
          PY

      - name: Sanity: list Artifact Registry repos
        run: |
          AR="${AR_REGION:-}"
          AR="${AR:-us-central1}"
          gcloud artifacts repositories list --location="$AR" || true
          gcloud artifacts repositories describe "${REPO_NAME}" \
            --location="$AR" \
            --project="${PROJECT_ID}"

      # Explicit docker login to Artifact Registry (fail early if auth is wrong)
      - name: Artifact Registry docker login
        run: |
          AR="${AR_REGION:-}"
          AR="${AR:-us-central1}"
          HOST="${AR}-docker.pkg.dev"
          echo "Logging in to ${HOST}"
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin "https://${HOST}"

      # Build & Push image to Artifact Registry
      - name: Build & Push Image
        working-directory: app
        run: |
          set -euo pipefail
          AR="${AR_REGION:-}"
          AR="${AR:-us-central1}"
          IMAGE="${AR}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}"
          echo "Building and pushing ${IMAGE}:latest and ${IMAGE}:${GITHUB_SHA}"
          docker build -t "${IMAGE}:latest" -t "${IMAGE}:${GITHUB_SHA}" .
          docker push "${IMAGE}:latest"
          docker push "${IMAGE}:${GITHUB_SHA}"
          echo "IMAGE_URI=${IMAGE}:${GITHUB_SHA}" >> $GITHUB_ENV

      # Get GKE credentials (use REGION if provided; else ZONE)
      - name: Get GKE credentials
        run: |
          CLUSTER="${{ secrets.GKE_CLUSTER }}"
          REG="${{ secrets.GKE_REGION }}"
          ZONE="${{ secrets.GKE_ZONE }}"
          if [ -n "$REG" ]; then
            gcloud container clusters get-credentials "$CLUSTER" --region "$REG"
          else
            gcloud container clusters get-credentials "$CLUSTER" --zone "$ZONE"
          fi

      # Deploy manifests (deployment.yaml expects PROJECT_ID; image tag uses :latest there)
      - name: Deploy manifests
        run: |
          sed "s/PROJECT_ID/${PROJECT_ID}/g" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml

      - name: Show rollout & external IP
        run: |
          kubectl -n gke-vertex-demo rollout status deploy/fancy-app
          kubectl -n gke-vertex-demo get svc fancy-app -o wide

