name: CD

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REPO_NAME: node-app-repo
      IMAGE_NAME: fancy-app
      AR_REGION: ${{ secrets.AR_REGION }}     # optional; will default to us-central1
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_REGION: ${{ secrets.GKE_REGION }}   # set either REGION or ZONE
      GKE_ZONE: ${{ secrets.GKE_ZONE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Federated auth to Google (provides $GOOGLE_APPLICATION_CREDENTIALS)
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2) Install gcloud CLI
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      # 3) ACTIVATE the service account in gcloud (fixes NoActiveAccountException)
      - name: Activate SA for gcloud & set project
        run: |
          set -euo pipefail
          gcloud auth activate-service-account --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
          gcloud config set project "${PROJECT_ID}"
          echo "Active account:"
          gcloud auth list

      # 4) Install the GKE kubectl auth plugin (Ubuntu 24.04-friendly)
      - name: Install GKE auth plugin
        run: |
          set -euo pipefail
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg \
            | sudo gpg --dearmor -o /etc/apt/keyrings/google-cloud-archive-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/google-cloud-archive-keyring.gpg] https://packages.cloud.google.com/apt cloud-sdk main" \
            | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      # 5) Configure docker to push to Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker --quiet

      # 6) Quick sanity on AR (now that the account is active)
      - name: "Sanity: list Artifact Registry repos"
        run: |
          set -euo pipefail
          AR="${AR_REGION:-}"; AR="${AR:-us-central1}"
          gcloud artifacts repositories list --location="$AR" || true
          gcloud artifacts repositories describe "${REPO_NAME}" --location="$AR" --project="${PROJECT_ID}"

      # 7) Explicit AR docker login (good diagnostics if auth is wrong)
      - name: "Artifact Registry docker login"
        run: |
          set -euo pipefail
          AR="${AR_REGION:-}"; AR="${AR:-us-central1}"
          HOST="${AR}-docker.pkg.dev"
          echo "Logging in to ${HOST}"
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin "https://${HOST}"

      # 8) Build & Push image
      - name: Build & Push Image
        working-directory: app
        run: |
          set -euo pipefail
          AR="${AR_REGION:-}"; AR="${AR:-us-central1}"
          IMAGE="${AR}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}"
          echo "Building & pushing ${IMAGE}:latest and ${IMAGE}:${GITHUB_SHA}"
          docker build -t "${IMAGE}:latest" -t "${IMAGE}:${GITHUB_SHA}" .
          docker push "${IMAGE}:latest"
          docker push "${IMAGE}:${GITHUB_SHA}"
          echo "IMAGE_URI=${IMAGE}:${GITHUB_SHA}" >> $GITHUB_ENV

      # 9) Get GKE credentials
      - name: Get GKE credentials
        run: |
          set -euo pipefail
          if [ -n "${GKE_REGION}" ]; then
            gcloud container clusters get-credentials "${GKE_CLUSTER}" --region "${GKE_REGION}" --project "${PROJECT_ID}"
          else
            gcloud container clusters get-credentials "${GKE_CLUSTER}" --zone "${GKE_ZONE}" --project "${PROJECT_ID}"
          fi

      # 10) Deploy
      - name: Deploy manifests
        run: |
          set -euo pipefail
          # Replace PROJECT_ID in deployment image (deployment.yaml uses :latest)
          sed "s/PROJECT_ID/${PROJECT_ID}/g" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml

      - name: Rollout status & service
        run: |
          set -euo pipefail
          kubectl -n gke-vertex-demo rollout status deploy/fancy-app
          kubectl -n gke-vertex-demo get svc fancy-app -o wide
